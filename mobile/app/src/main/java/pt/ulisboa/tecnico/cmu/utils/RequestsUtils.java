package pt.ulisboa.tecnico.cmu.utils;

import android.content.Context;
import android.util.Log;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import pt.ulisboa.tecnico.cmu.R;
import pt.ulisboa.tecnico.cmu.exceptions.UnauthorizedException;
import pt.ulisboa.tecnico.cmu.exceptions.UserNotFoundException;

public final class RequestsUtils {

    private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");

    private static final String TAG = "RequestsUtils";
    private static final String LOGIN_ENDPOINT = "/login";
    private static final String REGISTER_ENDPOINT = "/register";
    private static final String GET_ALBUMS_ENDPOINT = "/albums";

    private static OkHttpClient httpClient;
    private static String token;

    private RequestsUtils() {
    }


    /**
     * Tries to login the user into the server.
     *
     * @param context    the activity Context
     * @param userId     the Google's account id of the user.
     * @param oauthToken the oauth token generated by Google.
     * @return a session token if login is successful and null otherwise.
     * @throws UserNotFoundException if the user is not registered.
     */
    public static String login(Context context, String userId, String oauthToken)
        throws UserNotFoundException, IOException {
        OkHttpClient client = getHttpClient(context);

        if (client == null) {
            return null;
        }

        RequestBody body = RequestBody.create(RequestsUtils.JSON,
            "{\"userid\": \"" + userId + "\","
                + "\"oauthToken\" : \"" + oauthToken + "\"}");
        Request request = new Request.Builder()
            .url(context.getResources().getString(R.string.server_url) + LOGIN_ENDPOINT)
            .post(body)
            .build();

        Response response = client.newCall(request).execute();

        if (response.body() == null) {
            Log.e(TAG, "Response Body is Empty.");
        }

        // User not found
        if (response.code() == 404) {
            throw new UserNotFoundException(response.body().string());
        }

        if (response.code() != 200) {
            Log.e(TAG, response.body().string());
            return null;
        }

        String jsonResponse = response.body().string();
        final ObjectNode node = new ObjectMapper().readValue(jsonResponse, ObjectNode.class);

        String tokenLogin = node.get("token").asText();

        // Save token.
        if (tokenLogin != null) {
            token = tokenLogin;
            SharedPropertiesUtils.saveToken(context, tokenLogin);
        } else {
            return "";
        }

        return token;
    }

    /**
     * Tries to register the user in the server.
     *
     * @param context the activity Context.
     * @param userId  the Google's account id of the user.
     * @param name    the name present in the Google's account.
     * @param email   the email of the Google's account.
     * @return true if successful and false otherwise.
     */
    public static boolean register(Context context, String userId, String name, String email) {
        OkHttpClient client = getHttpClient(context);

        if (client == null) {
            return false;
        }

        RequestBody body = RequestBody.create(RequestsUtils.JSON,
            "{\"userid\": \"" + userId + "\", "
                + "\"name\" : \"" + name + "\","
                + "\"email\" : \"" + email + "\"}");
        Request request = new Request.Builder()
            .url(context.getResources().getString(R.string.server_url) + REGISTER_ENDPOINT)
            .post(body)
            .build();

        try {
            Response response = client.newCall(request).execute();

            if (response.body() == null) {
                Log.e(TAG, "Response Body is Empty.");
                return false;
            }

            if (response.code() != 200) {
                Log.e(TAG, response.body().string());
                return false;
            }
            return true;
        } catch (IOException e) {
            AlertUtils.alert("Unable to sign in.", context);
            Log.e(TAG, "Unable to POST request /register.", e);
        }
        return false;
    }

    public static String getAlbums(Context context) throws UnauthorizedException {
        OkHttpClient client = getHttpClient(context);

        if (client == null) {
            return null;
        }

        Request request = new Request.Builder().addHeader("Authorization", "Bearer " + token)
            .url(context.getResources().getString(R.string.server_url) + GET_ALBUMS_ENDPOINT)
            .get()
            .build();

        try {
            Response response = client.newCall(request).execute();

            if (response.code() == 401 || response.code() == 403) {
                throw new UnauthorizedException();
            }

            if (response.body() == null) {
                Log.e(TAG, "Response Body is Empty.");
                return "[]";
            }

            if (response.code() == 200) {
                String albumsJson = response.body().string();
                SharedPropertiesUtils.saveAlbums(context, albumsJson);
                return albumsJson;
            }
        } catch (SocketTimeoutException e) {
            Log.e(TAG, "Timeout to GET request /albums.", e);
            return SharedPropertiesUtils.getAlbums(context);
        } catch (IOException e) {
            AlertUtils.alert("Unable to retrieve albums.", context);
            Log.e(TAG, "Unable to GET request /albums.", e);
        }
        return "[]";
    }

    /**
     * Creates an HTTPS client that accepts the server's certificate in the resources. It accepts any domain.
     *
     * @param context the activity Context
     * @return the created client
     */
    private static OkHttpClient getHttpClient(Context context) {
        if (httpClient != null) {
            return httpClient;
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); // "BKS"
            ks.load(null, null);

            // CertificateFactory
            // certificate
            Certificate ca;
            try (InputStream is = context.getResources().openRawResource(R.raw.certificate)) {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                ca = cf.generateCertificate(is);
            }

            ks.setCertificateEntry("av-ca", ca);

            // TrustManagerFactory
            String algorithm = TrustManagerFactory.getDefaultAlgorithm();
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
            // Create a TrustManager that trusts the CAs in our KeyStore
            tmf.init(ks);

            // Create a SSLContext with the certificate that uses tmf (TrustManager)
            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(null, tmf.getTrustManagers(), new SecureRandom());

            // selfSocketFactory is deprecated, didn't find a way to get the new one
            httpClient = new OkHttpClient.Builder().sslSocketFactory(sslContext.getSocketFactory()).hostnameVerifier(
                (hostname, session) -> true).build();

        } catch (IOException | KeyStoreException | CertificateException | NoSuchAlgorithmException | KeyManagementException e) {
            Log.e(TAG, "Unable to create HTTPS client.", e);
        }
        return httpClient;
    }

    public static String getToken(Context context) {
        if (token == null) {
            token = SharedPropertiesUtils.getToken(context);
        }
        return token;
    }
}
